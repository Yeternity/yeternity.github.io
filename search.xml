<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Eclipse使用前的配置</title>
    <url>/2020/02/09/Eclipse%E4%BD%BF%E7%94%A8%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>写在前面的话：</strong> Eclipse每次新建工作空间，原来的配置都会消失，需要重新配置或者导入以前的配置。今天就记录一下Eclipse开发的一些常用配置。</p>
<a id="more"></a>

<p><strong>环境：</strong></p>
<blockquote>
<p><strong>OS:</strong> Windows 10, v.10.0, x86_64 / win32<br><strong>Java version:</strong> 1.8.0_241<br><strong>IDE:</strong> Eclipse IDE for RCP and RAP Developers<br>&ensp;&ensp;&ensp;&ensp; Version: 2019-12 (4.14.0)<br>&ensp;&ensp;&ensp;&ensp; Build id: 20191212-1212</p>
</blockquote>
<h2 id="编码环境设置"><a href="#编码环境设置" class="headerlink" title="编码环境设置"></a>编码环境设置</h2><h3 id="编码格式UTF-8"><a href="#编码格式UTF-8" class="headerlink" title="编码格式UTF-8"></a>编码格式UTF-8</h3><p>编码格式统一，可以防止乱码。</p>
<ol>
<li><p>Eclipse默认编码格式改成 <code>UTF-8</code>，适用于没有指定编码格式的文件<br><code>Windows-&gt;Preferences-&gt;General-&gt;Workspace-&gt;Text file encoding-&gt;Other-&gt;UTF-8</code></p>
</li>
<li><p>更改有指定编码格式的文件（如Java Properties）<br><code>Windows-&gt;Preferences-&gt;General –&gt; Content Types –&gt; Text –&gt; Java Properties File</code><br>将 <code>Default encoding</code> 改为 <code>UTF-8</code> ，点击 <code>Update</code> 即可</p>
</li>
</ol>
<h3 id="换行符使用Unix"><a href="#换行符使用Unix" class="headerlink" title="换行符使用Unix"></a>换行符使用Unix</h3><p>换行符统一，有利于跨平台协作，不会发生 Git 记录被毁，文件内容不换行等问题。</p>
<ol>
<li><p>设置新建文件为Unix换行符<br><code>Windows-&gt;Preferences-&gt;General-&gt;Workspace-&gt;New text file line delimiter-&gt;Other-&gt;Unix</code></p>
</li>
<li><p>将Windows换行符的文件改成Unix<br><code>File-&gt;Convert Line Delimiters To-&gt;Unix</code></p>
</li>
</ol>
<blockquote>
<p>Windows 的记事本只能识别 “\r\n”(Windows)，因此当换行符为 “\n”（Unix) 时，记事本不会换行（直到 Windows 10 的记事本才支持Unix格式的换行符）</p>
</blockquote>
<h3 id="Tab替换为4个空格"><a href="#Tab替换为4个空格" class="headerlink" title="Tab替换为4个空格"></a>Tab替换为4个空格</h3><p>由于不同编辑器对于 <code>Tab</code>，可能会用不同长度的空白字符表示，因此使用Tab缩进，可能引起协作问题。一般我们使用4个空格来表示缩进。</p>
<ol>
<li><p><code>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;insert spaces for tabs</code></p>
</li>
<li><p><code>Window-&gt;Preferences-&gt;Java-&gt;Code Style -&gt;Formatter</code>，点击New Profile新建样式</p>
</li>
<li><p>在弹出页面中选择 <code>Indentation-&gt;Tab policy-&gt;Space only</code>，设置 <code>Indentation size：4</code></p>
</li>
</ol>
<h3 id="显示空白字符"><a href="#显示空白字符" class="headerlink" title="显示空白字符"></a>显示空白字符</h3><p>这个功能可以让我们看到Tab、Space、换行符等空白字符，可以让我们更清楚文件内容</p>
<p><code>Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;Text Editors-&gt;Show whitespace characters</code></p>
<h2 id="代码自动提示"><a href="#代码自动提示" class="headerlink" title="代码自动提示"></a>代码自动提示</h2><p><code>Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist -&gt; Auto Activation</code></p>
<p>Auto activation delay:  100<br>Auto activation trigger for Java: .abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</p>
<h2 id="字体类型和大小"><a href="#字体类型和大小" class="headerlink" title="字体类型和大小"></a>字体类型和大小</h2><p><code>Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Colors and Fonts-&gt;Basic-&gt;Text Font</code></p>
<p>一般选择 <code>Courier New</code> 字体</p>
<h2 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置"></a>保存设置</h2><p>导出<br><code>File-&gt;Export-&gt;General-&gt;Preferences</code></p>
<p>导入<br><code>File-&gt;Import-&gt;General-&gt;Preferences</code></p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>Eclipse配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Git自动转换换行符</title>
    <url>/2020/02/08/Git%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%8D%A2%E8%A1%8C%E7%AC%A6/</url>
    <content><![CDATA[<p><strong>写在前面的话：</strong> 决定换行符统一使用 <code>Unix(\n)</code>，并且在本地都使用了 Unix 的换行符，可是从 GitHub 上 clone 下来后，文件内容的换行符都变成了 <code>Windows(\r\n)</code> </p>
<a id="more"></a>

<p><strong>环境：</strong></p>
<blockquote>
<p><strong>OS:</strong> Windows 10<br><strong>Git:</strong> git version 2.25.0.windows.1</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 <code>0x0A(LF)</code>，早期的 Mac OS 使用的是 <code>0x0D(CR)</code> ，后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 <code>0x0D0A(CRLF)</code> 作为换行符。</p>
<p>为了跨平台协作，我们一般统一使用 Unix 格式的换行符。因此 Git 为了让 Windows 用户提交到 Git 上的换行符保持统一，提供了一个 <code>core.autocrlf</code> 自动转换换行符的功能。</p>
<h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>core.autocrlf</code> 用于 <code>CRLF</code> 与 <code>LF</code> 之间的转换</p>
<p>它有以下三个属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>true</code></td>
<td align="center">提交时（包括add与commit），把 CRLF 转换成 LF；签出时把 LF 转换成 CRLF</td>
</tr>
<tr>
<td align="center"><code>input</code></td>
<td align="center">提交时（包括add与commit），把 CRLF 转换成 LF；签出时不转换</td>
</tr>
<tr>
<td align="center"><code>false</code></td>
<td align="center">不进行转换</td>
</tr>
</tbody></table>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="core-autocrlf-true"><a href="#core-autocrlf-true" class="headerlink" title="core.autocrlf = true"></a><code>core.autocrlf = true</code></h4><p>检出时（ git checkout ），git 会把文本文件的换行符转化为 CRLF（只转化纯 LF 的文件）  </p>
<p>提交时（ git commit ），把暂存区的内容（也就是我们对工作区做的改动）转化为 LF 然后放入版本库。  </p>
<p>转化暂存区的内容时（ git add ），如果发现工作区文件里面存在 LF 换行符，LF 会被转化成 CRLF，并给出条警告：”LF will be replaced by CRLF”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> &lt;file-name&gt;.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际上，<code>true</code> 这个属性是专门为 Windows 所准备，因此我们的<code>工作区</code>默认应该是 <code>CRLF</code>。但是<code>工作区</code>由于人为因素，有可能会混有 <code>LF</code>，Git 为了防止这个意外情况，在<code>暂存区</code>设置了一道门槛：<strong>只要<code>工作区</code>的文件中有 <code>LF</code>，无论是混有，还是全部都是 <code>LF</code>，这些文件在加入到<code>暂存区</code>时，其中的 <code>LF</code> 都会被转化为 <code>CRLF</code>。</strong> 这时如果 <code>core.safecrlf = warn</code>，就会出现上面的警告。由于<code>仓库</code>中统一使用 <code>LF</code>，因此在提交时， Git 会再做一次转换，将<code>暂存区</code>所有文件从 <code>CRLF</code> 转换为 <code>LF</code>。</p>
</blockquote>
<h4 id="core-autocrlf-input"><a href="#core-autocrlf-input" class="headerlink" title="core.autocrlf = input"></a><code>core.autocrlf = input</code></h4><p>检出时（ git checkout ），不做转换</p>
<p>提交时（ git commit ），不做转换</p>
<p>转化暂存区的内容时（ git add ），如果发现工作区文件里面存在 CRLF 换行符，CRLF 会被转化成 LF，并给出警告：”CRLF will be replaced by LF”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">warning: CRLF will be replaced by LF <span class="keyword">in</span> &lt;file-name&gt;.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>事实上，<code>input</code> 这个属性是专门为 Linux 或 macOS 准备的，因此<code>工作区</code>默认应该为 <code>LF</code>，由于其他意外情况，可能会混有 <code>CRLF</code>，Git 为了解决这个问题，在<code>暂存区</code>设置了一道门槛：<strong>只要<code>工作区</code>的文件中有 <code>CRLF</code>，无论是混有，还是全部都是 <code>CRLF</code>，这些文件在加入到<code>暂存区</code>时，其中的 <code>CRLF</code> 都会被转化为 <code>LF</code>。</strong> 这时如果 <code>core.safecrlf = warn</code>，就会出现上面的警告。由于<code>仓库</code>中统一使用 <code>LF</code>，因此在提交时，便不需要再做转换。</p>
</blockquote>
<h4 id="core-autocrlf-false"><a href="#core-autocrlf-false" class="headerlink" title="core.autocrlf = false"></a><code>core.autocrlf = false</code></h4><p>不做任何转换</p>
<blockquote>
<p>这个 <code>false</code> 属性专门为只开发 Windows 程序的用户准备，关闭转换后，便可以让仓库的代码也保持 <code>CRLF</code>。当然也不止这样，如果你不想让 Git 修改你的换行符，就把它关掉。</p>
</blockquote>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><table>
<thead>
<tr>
<th align="center">区域</th>
<th align="center"><code>true</code></th>
<th align="center"><code>input</code></th>
<th align="center"><code>false</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">工作区</td>
<td align="center">默认为CRLF，但会混有LF</td>
<td align="center">默认为LF，但会混有CRLF</td>
<td align="center">任意</td>
</tr>
<tr>
<td align="center">暂存区</td>
<td align="center">全部为CRLF</td>
<td align="center">全部为LF</td>
<td align="center">全部为CRLF或全部为LF</td>
</tr>
<tr>
<td align="center">仓库</td>
<td align="center">全部为LF</td>
<td align="center">全部为LF</td>
<td align="center">全部为CRLF或全部为LF</td>
</tr>
</tbody></table>
<blockquote>
<p>以上比较是在 <code>core.safecrlf = true</code> 的情况下，如果 <code>core.safecrlf</code> 为 <code>warn</code> 或 <code>false</code>， 则当 <code>core.autocrlf = false</code>，时，暂存区和仓库中的换行符也会有混用的情况，即任意。（混用并没有测试过，纯属猜测）</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我想保证即使是Windows，本地工作空间也是Unix的换行符，现在 Windows 上许多编辑器都是识别这个换行符的。</p>
<p>所以不需要的功能是，检出（ git checkout ）时的转换，因此使用 <code>input</code> 属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>

<h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>使用以下命令，可在显示的条目最后看到刚配置的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>


<h2 id="core-safecrlf"><a href="#core-safecrlf" class="headerlink" title="core.safecrlf"></a>core.safecrlf</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><code>core.safecrlf</code> 可以检测 Git 是否将对文件造成不可逆转的换行符转换，以及检测文件中是否混有两种换行符（混用并没有测试过）</p>
<p>它有以下三个属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>true</code></td>
<td align="center">在提交时检查，如果发现<code>混用或转换</code>则拒绝提交</td>
</tr>
<tr>
<td align="center"><code>warn</code></td>
<td align="center">在提交时检查，如果发现<code>混用或转换</code>则警告</td>
</tr>
<tr>
<td align="center"><code>false</code></td>
<td align="center">不做任何检查</td>
</tr>
</tbody></table>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>由于已经使用了 <code>core.autocrlf = input</code>，所以即使混用了，提交到 Git 上的还是统一的 <code>LF</code>。但是我还是选择了 <code>true</code> ，因为想保证本地的文件也不存在混用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><s>听说 Git 有个 Bug ：文件编码是 UTF-8 并且包含中文文字，文件提交时，自动转换功能会失效。但是我测试了一下，并没有这个问题。难道是新版 Git 修复了？（git version 2.25.0.windows.1）</s></p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.cnblogs.com/zjoch/p/5400251.html" target="_blank" rel="noopener">GitHub 第一坑：换行符自动转换</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lxw1844912514/article/details/100028562" target="_blank" rel="noopener">Git 换行符检查 CRLF 与 LF</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/50862500" target="_blank" rel="noopener">git如何避免”warning: LF will be replaced by CRLF“提示？——Andy Deng的回答</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/flying_bat/archive/2013/09/16/3324769.html" target="_blank" rel="noopener">Git中的AutoCRLF与SafeCRLF换行符问题</a></p>
</li>
<li><p>git-config(1) Manual Page (Git Bash中使用命令 <code>git config --help</code>)</p>
</li>
<li><p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration" target="_blank" rel="noopener">8.1 Customizing Git - Git Configuration</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>换行符</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现批量将文件从GBK改成UTF-8</title>
    <url>/2020/02/08/Java%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%B0%86%E6%96%87%E4%BB%B6%E4%BB%8EGBK%E6%94%B9%E6%88%90UTF-8/</url>
    <content><![CDATA[<p><strong>写在前面的话：</strong>碰到一个编码格式为GBK的项目，要改成UTF-8，而且里边缩进全用了Tab，换行是Windows(\r\n)。因此写了这个批量处理的代码，可以将一个目录内的指定后缀(如.java)的文件，从GBK（原编码格式）转换成UTF-8（目标编码格式），同时将Tab转换成4个空格，换行符改成Unix(\n)</p>
<a id="more"></a>

<p><strong>运行环境：</strong></p>
<blockquote>
<p><strong>OS:</strong> Windows 10, v.10.0, x86_64 / win32<br><strong>Java version:</strong> 1.8.0_241<br><strong>IDE:</strong> Eclipse IDE for RCP and RAP Developers<br>&ensp;&ensp;&ensp;&ensp; Version: 2019-12 (4.14.0)<br>&ensp;&ensp;&ensp;&ensp; Build id: 20191212-1212</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>一般比较实用的场景就是将文件从GBK转化成UTF-8，不过这个代码也可以通过简单修改 <code>配置信息</code> 来完成其他编码格式间的转换</p>
<p><strong>配置信息介绍</strong></p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">说明</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>directoryToBeConverted</code></td>
<td align="center">需要转换的目录，该目录中指定后缀的文件都会被转化</td>
<td align="center">“D:\xxxx”</td>
</tr>
<tr>
<td align="center"><code>fileSuffix</code></td>
<td align="center">指定需要转换的文件的后缀名</td>
<td align="center">{“.java”, “.c”}</td>
</tr>
<tr>
<td align="center"><code>srcEncode</code></td>
<td align="center">原本文件的编码格式，使用者必须事先知道这个编码，否则程序将无法正确运行</td>
<td align="center">“GBK”</td>
</tr>
<tr>
<td align="center"><code>destEncode</code></td>
<td align="center">需要转换的目标编码，也需由使用者自行决定</td>
<td align="center">“UTF-8”</td>
</tr>
<tr>
<td align="center"><code>lineDelimiter</code></td>
<td align="center">文件中换行符的格式，可以选择Unix(\n)或Windows(\r\n)</td>
<td align="center">“\n”或”\r\n”</td>
</tr>
</tbody></table>
<blockquote>
<p>其中 <code>srcEncode</code> 与 <code>destEncode</code> 可以相同，这样，功能就变成将文件中的 <code>Tab</code> 转化成 <code>4个Space</code>, 将 <code>换行符</code> 改成指定格式</p>
</blockquote>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>GitHub:</strong> <a href="https://github.com/Yeternity/Useful-Java-Snippets" target="_blank" rel="noopener">Yeternity / Useful-Java-Snippets</a></p>
<p><strong><em>FileCharsetConversion.java</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yeternity.java.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件编码格式转换，同时将Tab转换为4个空格，换行符可以选择"\n"(Unix)或"\r\n"(Windows)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/02/06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yeternity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCharsetConversion</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 选择要转换的目录 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String directoryToBeConverted = <span class="string">"D:\\xxxx"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 选择要转换的文件的后缀名，可以选择一个&#123;".java"&#125;，也可以选择多个&#123;".java", ".c"&#125; */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] fileSuffix = &#123;<span class="string">".java"</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 原文件编码格式 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #printAvailableCharsets()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String srcEncode = <span class="string">"GBK"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 目标编码格式 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #printAvailableCharsets()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String destEncode = <span class="string">"UTF-8"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 使用的换行符格式"\n"(Unix)或"\r\n"(Windows) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String lineDelimiter = <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非配置变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 需要转换编码格式的文件 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  ArrayList&lt;File&gt; fileArray = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 文件编码格式转换</span></span><br><span class="line">        trans(directoryToBeConverted);</span><br><span class="line">        System.out.println(<span class="string">"Conversion Done"</span>);</span><br><span class="line">        <span class="comment">// 打印支持的字符集</span></span><br><span class="line">        <span class="comment">//printAvailableCharsets();</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定目录内的文件（指定文件后缀，如.java)从原编码格式转换为目标编码格式</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directoryPath 需要转换的文件或文件夹(如： D:\\test)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/02/06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Yeternity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trans</span><span class="params">(String directoryPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        getFileClass(<span class="keyword">new</span> File(directoryPath));</span><br><span class="line">        <span class="keyword">for</span> (File file : fileArray) &#123;</span><br><span class="line">            transEncode(file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定目录下的指定后缀的文件</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directoryInstance 指定目录的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/02/06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Yeternity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFileClass</span><span class="params">(File directoryInstance)</span></span>&#123;</span><br><span class="line">        File[] files = directoryInstance.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                getFileClass(f);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (String s : fileSuffix) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f.getName().endsWith(s)) &#123;</span><br><span class="line">                        System.out.println(f.getAbsolutePath());</span><br><span class="line">                        fileArray.add(f);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的文件，从编码格式srcEncode转为编码格式destEncode（同时也会将文件中所有</span></span><br><span class="line"><span class="comment">     * 的Tab转换为4个空格，换行符改成"\n"(Unix)或者"\r\n"(Windows)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 需要转换编码的文件路径(如:D:\\test\\Test.java)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/02/06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Yeternity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transEncode</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 以GBK格式，读取文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis, srcEncode);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        </span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建StringBuffer字符串缓存区</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 通过readLine()方法遍历读取文件</span></span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将所有Tab转换为4个空格（注字符串中的Tab也会被转换）</span></span><br><span class="line">            <span class="keyword">if</span> (str.indexOf(<span class="string">"\t"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                str = str.replaceAll(<span class="string">"\t"</span>, <span class="string">"    "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用readLine()方法无法进行换行，需要手动在原本输出的字符串后面加"\n"(Unix)或"\r\n"(Windows)</span></span><br><span class="line">            str += lineDelimiter;</span><br><span class="line">            sb.append(str);</span><br><span class="line">        &#125;</span><br><span class="line">        String str2 = sb.toString();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 以UTF-8格式写入文件，false代表不追加直接覆盖，true代表追加文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filePath, <span class="keyword">false</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos, destEncode);</span><br><span class="line">        osw.write(str2);</span><br><span class="line">        osw.flush();</span><br><span class="line">        </span><br><span class="line">        osw.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        br.close();</span><br><span class="line">        isr.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印出所有&#123;<span class="doctag">@link</span> java.nio.charset.Charset charset&#125;支持的字符集</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2020/02/06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Yeternity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAvailableCharsets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String , Charset&gt; map = Charset.availableCharsets();</span><br><span class="line">        Set&lt;Entry&lt;String , Charset&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String , Charset&gt; entry : set) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://zhidao.baidu.com/question/1371618660181473019.html" target="_blank" rel="noopener">Tab(缩进符)替换为4个空格</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_42038771/article/details/80490505" target="_blank" rel="noopener">JAVA中GBK格式文件和UTF-8格式文件互相转换</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/aigeileshei/p/6049458.html" target="_blank" rel="noopener">如何解决GBK的编码的文件中的中文转换成为UTF-8编码的文件而且不乱码</a></p>
</li>
<li><p><a href="https://blog.csdn.net/xct841990555/article/details/90486007" target="_blank" rel="noopener">java NIO字符集Charset 支持的所有字符集</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java IO</tag>
        <tag>编码格式</tag>
      </tags>
  </entry>
  <entry>
    <title>多台电脑共同维护Hexo博客</title>
    <url>/2020/02/05/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%85%B1%E5%90%8C%E7%BB%B4%E6%8A%A4Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>写在前面的话:</strong> 至此我们已经能够使用Hexo发布文章了，但是现在又有一个问题，如果因为某些原因，需要用另一台电脑来发布文章，该怎么管理我们的Hexo源码呢？（使用Git做版本控制）</p>
<a id="more"></a>

<p><strong>环境：</strong>   </p>
<blockquote>
<p><strong>OS:</strong>  Windows 10<br><strong>Git:</strong>  git version 2.25.0.windows.1<br><strong>Hexo:</strong>  4.2.0<br><strong>Node.js:</strong>  v12.14.1<br><strong>NPM:</strong>  6.13.4<br><strong>NexT:</strong>  v7.7.0  </p>
</blockquote>
<h2 id="使用Git的好处"><a href="#使用Git的好处" class="headerlink" title="使用Git的好处"></a>使用Git的好处</h2><p>使用Git，不仅可以让我们能够多台电脑管理Hexo博客，还能记录所有的更改，出了问题可以随时回退。</p>
<h2 id="将Hexo源码上传至GitHub"><a href="#将Hexo源码上传至GitHub" class="headerlink" title="将Hexo源码上传至GitHub"></a>将Hexo源码上传至GitHub</h2><h3 id="删除不必要的文件"><a href="#删除不必要的文件" class="headerlink" title="删除不必要的文件"></a>删除不必要的文件</h3><p>为了从GitHub下载能够更快些，可以删除一些不必要的文件。  </p>
<p>比如：<br>默认主题： <code>theme/landscape</code> (前提是你已经使用了其他的主题，不需要它了)</p>
<h3 id="删除-git"><a href="#删除-git" class="headerlink" title="删除.git"></a>删除.git</h3><p>由于一个仓库只能有一个 <code>.git</code> ，因此需要删除其他的</p>
<p>比如：<br>NexT主题下的 <code>themes\next\.git</code> 和 <code>themes\next\source\lib\canvas-nest\.git</code> （后面这个动态背景没啥用，我直接把canvas-nest文件夹删了，你没有的话，可能没装这个外部的库，那就不需要管了）</p>
<h3 id="配置Hexo根目录下的-gitignore"><a href="#配置Hexo根目录下的-gitignore" class="headerlink" title="配置Hexo根目录下的.gitignore"></a>配置Hexo根目录下的.gitignore</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"><span class="addition">+ package-lock.json</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>增加最后package-lock.json，这个存在会导致后面的npm install命令出错</p>
</blockquote>
<h3 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h3><p>在GitHub上，新建一个 <code>private</code> 仓库（使用private可以避免很多私人信息的泄露），命名为 <code>hexo-source</code> （你也可以叫其他的名字）</p>
<h3 id="上传GitHub"><a href="#上传GitHub" class="headerlink" title="上传GitHub"></a>上传GitHub</h3><p>在Hexo根目录，打开Git Bash</p>
<ol>
<li><p>生成一个 <code>README.md</code> 文件， 里面可以填写这个仓库的描述</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"# hexo-source"</span> &gt;&gt; README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化仓库（会生成.git)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动探测到新增、修改、删除，并添加改动到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交到本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>连接远程仓库 <code>Yeternity/hexo-source</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:Yeternity/hexo-source.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加文件到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="新电脑操作"><a href="#新电脑操作" class="headerlink" title="新电脑操作"></a>新电脑操作</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Git、Node.js、Hexo</li>
<li>Git个人信息、SSH Keys  </li>
</ul>
<p>参考  <a href="/2020/01/30/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" title="Hexo + GitHub Pages 搭建个人博客">Hexo + GitHub Pages 搭建个人博客</a></p>
<h3 id="还原Hexo"><a href="#还原Hexo" class="headerlink" title="还原Hexo"></a>还原Hexo</h3><ol>
<li><p>克隆hexo-source</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:Yeternity/hexo-source.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于上传GitHub时，<code>node-modules</code>被忽略，因此要通过 <code>package.json</code> 中的内容再装回去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-source</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>参考  <a href="/2020/02/02/%E4%BD%BF%E7%94%A8Hexo%E5%8F%91%E5%B8%83%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/" title="使用Hexo发布第一篇文章">使用Hexo发布第一篇文章</a>  </p>
<p><strong><em>问题注意：</em></strong>  </p>
<blockquote>
<p>从GitHub上拉下来后，再次部署，所有文章更新时间都变成了拉下来的时间</p>
</blockquote>
<p><strong><em>原因：</em></strong></p>
<blockquote>
<p>原来文章更新时间默认为文件修改时间，而从GitHub上拉下来，会重新创建文件</p>
</blockquote>
<p><strong><em>解决方案：</em></strong></p>
<blockquote>
<p>解决方法，在以前的所有文章的 <code>Front-matter</code> 中加上 <code>updated</code></p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title: 使用Hexo发布第一篇文章</span><br><span class="line">date: 2020-02-02 17:12:12</span><br><span class="line"><span class="addition">+ updated: 2020-02-03 08:13:05</span></span><br><span class="line">tags: [Hexo, Blog]</span><br><span class="line">categories: Hexo</span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure>

<p>因此我们也可以将 <code>post.md</code> 模板更改一下</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="addition">+ updated: &#123;&#123; date &#125;&#125;</span></span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure>

<h3 id="上传更改"><a href="#上传更改" class="headerlink" title="上传更改"></a>上传更改</h3><p>修改文章或者新增文章，部署完毕后，再将源码上传至GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git diff</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"commit message"</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>git status</code> 可以看到本地相对与远程的状态差异<br><code>git diff</code> 可以看到修改的文件中具体内容的差异</p>
</blockquote>
<h2 id="Git拉取"><a href="#Git拉取" class="headerlink" title="Git拉取"></a>Git拉取</h2><p>hexo仓库更新（每次改动前，如写文章，装插件，改配置，都要先更新仓库，保持一致）</p>
<p>将Git上所有文件拉取到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure>

<p>强制将本地内容指向刚刚同步Git云端内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://ricky.moe/2017/01/13/hexo-perfect-synchronize/" target="_blank" rel="noopener">最完美的Hexo多电脑同步方法</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/0af76a76b279" target="_blank" rel="noopener">Hexo + GitHub Pages 搭建博客的教程</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo发布第一篇文章</title>
    <url>/2020/02/02/%E4%BD%BF%E7%94%A8Hexo%E5%8F%91%E5%B8%83%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p><strong>写在前面的话:</strong> 搭建好博客，并且换了一身皮，接下来开始发布第一篇文章</p>
<a id="more"></a>

<p><strong>环境：</strong>   </p>
<blockquote>
<p><strong>OS:</strong>  Windows 10<br><strong>Git:</strong>  git version 2.25.0.windows.1<br><strong>Hexo:</strong>  4.2.0<br><strong>Node.js:</strong>  v12.14.1<br><strong>NPM:</strong>  6.13.4<br><strong>NexT:</strong>  v7.7.0  </p>
</blockquote>
<h2 id="设置新建文件名格式"><a href="#设置新建文件名格式" class="headerlink" title="设置新建文件名格式"></a>设置新建文件名格式</h2><p> <code>Hexo</code> 可以解析用 <code>Markdown</code> 语法写的文章，文件名为 <code>title.md</code> ，这里我们在 <code>title</code> 中添加文件创建时间，以便更好的管理我们的文章</p>
<h3 id="添加时间"><a href="#添加时间" class="headerlink" title="添加时间"></a>添加时间</h3><p> 打开  <strong><em>Hexo配置文件(_config.yml)</em></strong> ，在其中搜索 <code>Writing</code>， 更改如下所示</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span> <span class="comment"># File name of new posts</span></span><br></pre></td></tr></table></figure>

<h2 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h2><p>我们写文章默认使用的是 <code>scaffolds</code> 路径下的 <code>post.md</code>, 打开该文件， 在其中添加 <code>tags:</code> 与 <code>categories:</code>（写博客时常用的标签和分类）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>进入 Hexo 根目录， 打开 Git Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"使用Hexo发布第一篇文章"</span></span><br><span class="line">INFO  Created: D:\Git\Hexo\yeternity.github.io\<span class="built_in">source</span>\_posts\2020-02-02-使用Hexo发布第一篇文章.md</span><br></pre></td></tr></table></figure>

<h2 id="书写文章"><a href="#书写文章" class="headerlink" title="书写文章"></a>书写文章</h2><p>打开上一步中，命令行提示路径下的文件 <code>2020-02-02-使用Hexo发布第一篇文章.md</code></p>
<h3 id="增加标签和分类"><a href="#增加标签和分类" class="headerlink" title="增加标签和分类"></a>增加标签和分类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 使用Hexo发布第一篇文章</span><br><span class="line">date: 2020-02-02 17:12:12</span><br><span class="line">tags: [Hexo, Blog]</span><br><span class="line">categories: Hexo</span><br></pre></td></tr></table></figure>

<h3 id="使用Markdown书写文章"><a href="#使用Markdown书写文章" class="headerlink" title="使用Markdown书写文章"></a>使用Markdown书写文章</h3><p>参考<br><a href="https://www.jianshu.com/p/ad2f6c9cfd29" target="_blank" rel="noopener">如何使用 Markdown 书写博客</a></p>
<h3 id="设定首页显示内容"><a href="#设定首页显示内容" class="headerlink" title="设定首页显示内容"></a>设定首页显示内容</h3><p>一般 Hexo 会将整篇文章在首页显示，如果只需要在首页显示一部分内容，然后显示 <code>阅读全文&gt;&gt;</code>按钮, 可以在我们编写的 <code>.md</code>文件中，再需要显示的内容后加上一句 <code>&lt;!--more--&gt;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo发布第一篇文章</span><br><span class="line">date: 2020-02-02 17:12:12</span><br><span class="line">tags: [Hexo, Blog]</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="strong">**写在前面的话:**</span> 搭建好博客，并且换了一身皮，接下来开始发布第一篇文章</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 设置新建文件名格式</span></span><br></pre></td></tr></table></figure>

<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>本地查看效果，执行以下命令，进 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 查看；如果有问题，修改后重新执行以下步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate(简写 hexo g)</span><br><span class="line">$ hexo server(简写 hexo s)</span><br></pre></td></tr></table></figure>

<p>检查完，没有问题，部署到 GitHub 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy(简写 hexo d)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">Hexo系列(五) 撰写文章</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/ad2f6c9cfd29" target="_blank" rel="noopener">如何使用 Markdown 书写博客</a></p>
</li>
<li><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">Hexo官方说明文章之写作</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之个性化</title>
    <url>/2020/02/02/Hexo%E4%B9%8B%E4%B8%AA%E6%80%A7%E5%8C%96/</url>
    <content><![CDATA[<p><strong>写在前面的话:</strong> 博客搭建好后，如何让它更具我们自己喜好的特征呢？</p>
<a id="more"></a>

<p><strong>环境：</strong>   </p>
<blockquote>
<p><strong>OS:</strong>  Windows 10<br><strong>Git:</strong>  git version 2.25.0.windows.1<br><strong>Hexo:</strong>  4.2.0<br><strong>Node.js:</strong>  v12.14.1<br><strong>NPM:</strong>  6.13.4<br><strong>NexT:</strong>  v7.7.0  </p>
</blockquote>
<h2 id="0-通用操作"><a href="#0-通用操作" class="headerlink" title="0.通用操作"></a>0.通用操作</h2><p>本地查看效果，执行以下命令，进 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate(简写 hexo g)</span><br><span class="line">$ hexo server(简写 hexo s)</span><br></pre></td></tr></table></figure>

<p>部署到GitHub上，查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate(简写 hexo g)</span><br><span class="line">$ hexo deploy(简写 hexo d)</span><br></pre></td></tr></table></figure>

<p><strong><em>以上 <code>hexo clean</code> 操作不必每次都做，只有在更改不起作用时，需要clean一下；部署到GitHub前，最好clean一下；</em></strong></p>
<h2 id="更改基本配置"><a href="#更改基本配置" class="headerlink" title="更改基本配置"></a>更改基本配置</h2><p>Hexo根目录下，有一个名为_config.yml的文件，它包含了Hexo的基本配置，之后称之为 <strong><em>Hexo配置文件(_config.yml)</em></strong></p>
<p>打开 <strong><em>Hexo配置文件(_config.yml)</em></strong> ，更改 <strong>Site</strong> 中的内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"Yeternity的博客"</span> <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">"过程就是奖励"</span> <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"Stay Hungry.&lt;br&gt;Stay Foolish."</span> <span class="comment"># 简介，分两行显示</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yeternity</span> <span class="comment"># 博主 站长</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 默认语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span> <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>注意 <code>_config.yml</code> 要以 <code>UTF-8</code> 格式保存，否则中文会乱码（可以用记事本的另存为，或者使用VSCode）  </li>
<li><code>zh-CN</code> 是根据 <code>themes\landscape\languages</code> 下的文件 <code>zh-CN.yml</code> 确定的（landscape是Hexo默认主题）</li>
</ul>
</blockquote>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="下载-NexT"><a href="#下载-NexT" class="headerlink" title="下载 NexT"></a>下载 NexT</h3><p>在 Hexo根目录 中右击鼠标打开 Git Bash 窗口，使用如下命令下载 <code>NexT</code> 主题文件到 themes/next 目录 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="启用-NexT"><a href="#启用-NexT" class="headerlink" title="启用 NexT"></a>启用 NexT</h3><p>打开 <strong><em>Hexo配置文件(_config.yml)</em></strong> ， 将  <code>theme</code> 选项的值改为 <code>next</code>，注意 <code>&#39;:&#39;</code> 后要加一个空格</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>


<h2 id="切换NexT-Scheme"><a href="#切换NexT-Scheme" class="headerlink" title="切换NexT Scheme"></a>切换NexT Scheme</h2><p>主题也有一个名为 <code>_config.yml</code> 配置文件，在 <code>themes\next</code> 下，以下称之为 <strong><em>NexT配置文件(_config.yml)</em></strong> </p>
<p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，通过搜索关键字 <code>Scheme Settings</code> 定位，然后将使用的 <code>scheme</code> 打开注释即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h2 id="增加Menu"><a href="#增加Menu" class="headerlink" title="增加Menu"></a>增加Menu</h2><h3 id="去除注释"><a href="#去除注释" class="headerlink" title="去除注释"></a>去除注释</h3><p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>Menu Settings</code> 进行定位，各个菜单项通过 <code>#</code> 注释开启或关闭</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span> <span class="comment"># add</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span> <span class="comment"># add</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span> <span class="comment"># add</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<h3 id="添加Page"><a href="#添加Page" class="headerlink" title="添加Page"></a>添加Page</h3><p>在 Hexo 根目录 下，打开 Git Bash，输入命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span></span><br><span class="line">INFO  Created: D:\Git\Hexo\yeternity.github.io\<span class="built_in">source</span>\about\index.md</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br><span class="line">INFO  Created: D:\Git\Hexo\yeternity.github.io\<span class="built_in">source</span>\tags\index.md</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"categories"</span></span><br><span class="line">INFO  Created: D:\Git\Hexo\yeternity.github.io\<span class="built_in">source</span>\categories\index.md</span><br></pre></td></tr></table></figure>

<h3 id="修改Page"><a href="#修改Page" class="headerlink" title="修改Page"></a>修改Page</h3><p>打开 <code>source</code> 文件夹下各自的 <code>index.md</code>，在其中添加 <code>type</code> 和 <code>comments</code> （不是文章，不允许评论）</p>
<p><code>source/about/index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-01-30 08:58:21</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><code>source/tags/index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-01-30 08:59:05</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><code>source/categories/index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2020-01-30 08:57:35</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><strong><em>注意:</em></strong>  </p>
<blockquote>
<p>注意出现问题，跟换主题后，原来可以使用的”首页”和“归档”会报错（%20是空格的意思）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot GET &#x2F;%20&#x2F;</span><br><span class="line">Cannot GET &#x2F;archives&#x2F;%20&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong><em>问题原因:</em></strong>  </p>
<blockquote>
<p>假如下载的时候，使用了如下命令，由于该项目已经不再维护，会出现一些问题<br><del><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></del></p>
</blockquote>
<p><strong><em>解决方案：</em></strong>  </p>
<blockquote>
<p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>Menu Settings</code> ，进行如下修改</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">home: &#x2F;|| home			#将&#x2F;后面的空格去掉</span><br><span class="line">archives: &#x2F;archives&#x2F;|| archive		#将&#x2F;archives&#x2F;后面的空格去掉</span><br></pre></td></tr></table></figure>

<h2 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h2><blockquote>
<p>网页背景中随着鼠标会移动的，一条条杠（佩服我的描述。。。）</p>
</blockquote>
<h3 id="下载-canvas-nest"><a href="#下载-canvas-nest" class="headerlink" title="下载 canvas-nest"></a>下载 <code>canvas-nest</code></h3><p>进入themes/next目录，右击鼠标，打开Git Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<h3 id="打开动态背景"><a href="#打开动态背景" class="headerlink" title="打开动态背景"></a>打开动态背景</h3><p>在 <strong><em>NexT配置文件(_config.yml)</em></strong> 中配置开启canvas_nest（ <code>enable</code> 设置为 <code>true</code> ）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>canvas_nest 如有更新，可以再从 GitHub 上拉下来</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next/<span class="built_in">source</span>/lib/canvas-nest</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>


<h2 id="设置侧栏行为"><a href="#设置侧栏行为" class="headerlink" title="设置侧栏行为"></a>设置侧栏行为</h2><p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>Sidebar Settings</code> </p>
<p><strong>主要两个字段：</strong></p>
<blockquote>
<ul>
<li>position: 设置侧栏在左边还是右边</li>
<li>display: 设置侧栏在什么状态下显示</li>
</ul>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>Sidebar Avatar</code> ，将 avatar 的值设置成头像图片的链接地址即可  </p>
<blockquote>
<p>例如将名为sleepy.jpg的图片放在themes\next\source\images下</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/sleepy.jpg</span> <span class="comment"># 自定义头像</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 圆形显示</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span> <span class="comment"># 不随鼠标转动</span></span><br></pre></td></tr></table></figure>
<p><strong><em>问题：</em></strong><br><u>在更改了rounded和rotated属性后，直接部署到github上生效速度很慢，先将url注释掉，再部署，生效后然后再取消注释，再部署，生效速度会加快</u></p>
<h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>Social Links</code> ，social 的值按 <code>Key: permalink || icon</code> 格式设置  </p>
<p>在fontawesome图标库（<a href="https://fontawesome.com" target="_blank" rel="noopener">https://fontawesome.com</a>）找自己喜欢的小图标，并将名字复制在icon的位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yeternity</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/yeternity</span> <span class="string">||</span> <span class="string">codiepie</span> <span class="comment"># 在fontawesome上找了个C型的图标</span></span><br></pre></td></tr></table></figure>

<h2 id="添加文字统计功能"><a href="#添加文字统计功能" class="headerlink" title="添加文字统计功能"></a>添加文字统计功能</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入 Hexo根目录，打开 git bash 窗口，输入如下命令安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<h3 id="Hexo配置文件"><a href="#Hexo配置文件" class="headerlink" title="Hexo配置文件"></a>Hexo配置文件</h3><p>在 <strong><em>Hexo配置文件(_config.yml)</em></strong> 中增加以下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># symbols_count_time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="NexT配置文件"><a href="#NexT配置文件" class="headerlink" title="NexT配置文件"></a>NexT配置文件</h3><p>这个文件一般不用修改，用默认的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span> <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># Words Per Minute</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>必须 <code>clean</code> 一下，否则字数统计不出来，阅读时长显示 <code>NaN:aN</code> </p>
</blockquote>
<h2 id="添加阅读量统计功能"><a href="#添加阅读量统计功能" class="headerlink" title="添加阅读量统计功能"></a>添加阅读量统计功能</h2><p>打开 <strong><em>NexT配置文件(_config.yml)</em></strong> ，搜索关键字 <code>busuanzi_count</code>，enable不蒜子统计功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#启用</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>busuanzi_count</code> 只有部署到 GitHub 上，统计才会正常显示</p>
</blockquote>
<h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入 Hexo根目录，打开 git bash 窗口，输入如下命令安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h3 id="Hexo配置文件-1"><a href="#Hexo配置文件-1" class="headerlink" title="Hexo配置文件"></a>Hexo配置文件</h3><p>在 <strong><em>Hexo配置文件(_config.yml)</em></strong> 中增加以下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="NexT配置文件-1"><a href="#NexT配置文件-1" class="headerlink" title="NexT配置文件"></a>NexT配置文件</h3><p>搜索<code>Local Search</code>，将 <code>enable</code> 改成 <code>true</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启用</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>装了插件一般部署前都先clean一下</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478595" target="_blank" rel="noopener">Hexo系列(四) NexT主题配置</a></p>
</li>
<li><p><a href="https://blog.csdn.net/wsmrzx/article/details/81477926" target="_blank" rel="noopener">Hexo系列(二) 配置文件详解</a></p>
</li>
<li><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></p>
</li>
<li><p><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qijian2003122/article/details/82900455" target="_blank" rel="noopener">hexo博客添加搜索功能</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <url>/2020/01/30/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>写在前面的话：</strong> 记录是个好习惯，在经历了无数次“遗忘的坑”后，还是乖乖的去记录。不过我有强迫症，非要自己试着用这方法搭建一个，顺便记录一下。</p>
<a id="more"></a>
<blockquote>
<p>本文在 <strong>Windows 10</strong> 上操作</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote>
<p><strong>Git</strong> 是一个开源的分布式版本控制系统  </p>
</blockquote>
<p><em>下载地址</em>：<a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a>  </p>
<p>安装完成之后到桌面空白处单击鼠标右键，出现 <code>Git Bash Here</code> 选项</p>
<p>打开Git Bash，查看版本（验证安装是否成功）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.25.0.windows.1</span><br></pre></td></tr></table></figure>

<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><blockquote>
<ul>
<li><strong>Node.js</strong> 是一个基于 Google V8 引擎的 JavaScript 环境，它支持在后端运行 JavaScript  </li>
<li><strong>NPM</strong> 是默认与 Node.js 一起安装的包管理工具</li>
</ul>
</blockquote>
<p><em>下载地址</em>：<a href="https://nodejs.org/en" target="_blank" rel="noopener">https://nodejs.org/en</a></p>
<p>安装完成后，在Git Bash中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.14.1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure>

<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><blockquote>
<ul>
<li><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。<strong>Hexo</strong> 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
<li>类似于jekyll、Octopress、WordPress</li>
</ul>
</blockquote>
<p>官网：<a href="https://hexo.io/zh-cn" target="_blank" rel="noopener">https://hexo.io/zh-cn</a></p>
<p><em>安装Hexo：</em>  打开Git Bash，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Windows_NT 10.0.17763 win32 x64</span><br><span class="line">node: 12.14.1</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.40.0</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 2.0.1</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure>

<h3 id="Hexo、Node-js-与-Git、GitHub、GitHub-Pages"><a href="#Hexo、Node-js-与-Git、GitHub、GitHub-Pages" class="headerlink" title="Hexo、Node.js 与 Git、GitHub、GitHub Pages"></a>Hexo、Node.js 与 Git、GitHub、GitHub Pages</h3><blockquote>
<p><strong>Hexo</strong>是一个基于<strong>Node.js</strong>的静态博客程序，可以方便的生成 <u><i>静态网页</i></u>，然后使用<strong>Git</strong>托管在<strong>GitHub</strong>上。</p>
<p><strong>GitHub Pages</strong>是<strong>GitHub</strong>的一项很实用的功能，它可以让我们将<strong>GitHub</strong>里面的 <u><i>静态网页</i></u> 的代码在线上展示出来，可以用来做项目展示和个人博客的载体。</p>
</blockquote>
<p><u><i>静态网页：静态网页是标准的HTML文件，它的文件扩展名是.htm或.html，可以包含文本、图像、声音、FLASH动画、客户端脚本和ActiveX控件及JAVA小程序等。</i></u></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="建立GitHub仓库"><a href="#建立GitHub仓库" class="headerlink" title="建立GitHub仓库"></a>建立GitHub仓库</h3><p>在GitHub上新建仓库，仓库名为<code>yeternity.github.io</code>（yeternity改成你的GitHub用户名）</p>
<h3 id="使用Hexo本地建站"><a href="#使用Hexo本地建站" class="headerlink" title="使用Hexo本地建站"></a>使用Hexo本地建站</h3><ol>
<li><p>首先新建一个文件夹，用来存放Hexo生成的文件，我使用的是<code>D:\Git\Hexo</code> </p>
</li>
<li><p>打开Git Bash</p>
</li>
<li><p>进入<code>D:\Git\Hexo</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> D:\\Git\\Hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hexo初始化(hexo init 后为刚建立的GitHub仓库名)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init yeternity.github.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入<code>yeternity.github.io</code>文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> yeternity.github.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装package.json中的dependencies</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>yeternity.github.io</code>文件夹目录如下（有些可能没有，在之后的操作中会出现）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml  # Hexo网站配置文件</span><br><span class="line">├── package.json # 应用程序的信息</span><br><span class="line">├── db.json # 数据库信息</span><br><span class="line">├── node_modules # 依赖模块及安装的插件</span><br><span class="line">├── public # Hexo生成的静态网页</span><br><span class="line">├── .deploy_git # public中的文件（部署到GitHub)</span><br><span class="line">├── scaffolds # .md文件模板</span><br><span class="line">├── source # 资源文件</span><br><span class="line">|   ├── _drafts # 草稿，不会被发布</span><br><span class="line">|   └── _posts # 发布的文章</span><br><span class="line">└── themes # Hexo主题</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>启动服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server(简写 hexo s)</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器，输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
</li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h3><ul>
<li><p>配置个人信息(改成你自己的GitHub用户名和邮箱)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Yeternity"</span></span><br><span class="line">$ git config --global user.email <span class="string">"980888907@qq.com"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SSH keys</p>
</li>
</ul>
<blockquote>
<p>使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时提供用户名或密码。</p>
</blockquote>
<ol>
<li><p>输入以下命令，并一路回车（修改邮箱）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"980888907@qq.com"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>C:\Users\yeternity\.ssh\id_rsa.pub</code>，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>的New SSH key中</p>
</li>
<li><p>验证，输入以下命令；看到<code>Hi Yeternity! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>说明成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>在<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改，yeternity改成你的用户名</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yeternity/yeternity.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><ol>
<li><p>删除旧的 public 文件和db.json（不用每次都clean，更改不起作用时用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成新的 public 文件和db.json（clean后全部重新生成，没有clean只生成改动的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate(简写 hexo g)</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装git扩展</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署到GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy(简写 hexo d)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>最后可以查看效果<br><a href="https://yeternity.github.io" target="_blank" rel="noopener">https://yeternity.github.io</a></p>
<p><em>PS(postscript)</em>:<br>怎么避免 .md 文件被解析？</p>
<blockquote>
<p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy_git文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README.md，它也会在你下一次部署时被删去。怎么解决呢？  </p>
</blockquote>
<p>在执行hexo deploy前把在本地写好的README.md文件复制到public文件夹中，再去执行hexo deploy。<br>执行了hexo clean后，需要重新操作以上步骤。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.jianshu.com/p/0af76a76b279" target="_blank" rel="noopener">Hexo + GitHub Pages 搭建博客的教程</a></li>
<li><a href="https://blog.csdn.net/wsmrzx/article/details/81475866" target="_blank" rel="noopener">Hexo系列(一) 搭建博客网站</a></li>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方说明文档</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
